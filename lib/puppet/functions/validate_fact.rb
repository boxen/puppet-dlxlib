# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----

# ---- original file header ----
#
# @summary
#       Validate that the given fact's value matches any of the
#    possible expected values given
#
#
#
#
Puppet::Functions.create_function(:'validate_fact') do
  # @param args
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :args
  end


  def default_impl(*args)
    

    unless args.length == 2
      raise Puppet::ParseError, "validate_fact: wrong number of arguments (#{args.length}); must be 2"
    end

    fact = args[0]
    value = lookupvar(fact)

    expected_values = Array(args[1])

    unless expected_values.member? value
      raise Puppet::Error, \
        "validate_fact(#{fact.inspect}): expected #{fact.inspect} to be one of #{expected_values.inspect}, got: '#{value}'"
    end

  
  end
end
